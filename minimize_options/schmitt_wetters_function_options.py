import tensorflow as tf

from utils.utils import convert_variables

"""
Minimize options
"""

schmitt_wetters_function_options = [
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0002),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0004),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0006),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0008),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.001),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0002, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0004, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0006, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0008, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.001, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0002, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0004, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0006, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.0008, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.001, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.002),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.004),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.006),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.008),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.01),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.002, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.004, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.006, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.008, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.01, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.002, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.004, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.006, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.008, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.01, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.02),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.04),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.06),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.08),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.02, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.04, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.06, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.08, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.1, momentum=0.5),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.02, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.04, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.06, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.08, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.SGD(learning_rate=0.1, momentum=1),
        "eps": 0.0001,
        "max_steps": 100,
    },

    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.Adagrad(learning_rate=0.001),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.Adagrad(learning_rate=0.003),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.Adagrad(learning_rate=0.006),
        "eps": 0.0001,
        "max_steps": 100,
    },
    {
        "x": convert_variables([-1, 1, 1]),
        "opt": tf.keras.optimizers.Adagrad(learning_rate=0.009),
        "eps": 0.0001,
        "max_steps": 100,
    },
]
